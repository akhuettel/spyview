# data file for the Fltk User Interface Designer (fluid)
version 1.0109 
header_name {.h} 
code_name {.cxx}
decl {\#include "ImageWindow_Fitting.H"} {public
} 

decl {\#include <FL/Fl_File_Chooser.H>} {} 

decl {\#include "ImageWindow.H"} {} 

class NewFitFuncWindow {open
} {
  decl {Fitting::FitFunction *editing;} {public
  }
  Function {NewFitFuncWindow(Fitting::FitFunction *ff = NULL)} {open
  } {
    Fl_Window newfitfunc {
      label {New Fit Function} open
      xywh {6 546 545 385} type Double visible
    } {
      Fl_Button cancel {
        label Cancel
        callback {delete this;}
        xywh {375 350 74 25}
      }
      Fl_Input initialization {
        label Initialization
        xywh {5 20 530 60} type Multiline align 5
        code0 {if(ff) o->value(ff->initialization.c_str());}
      }
      Fl_Input definition {
        label Function
        xywh {5 180 530 25} align 5
        code0 {if(ff) o->value(ff->definition.c_str());}
      }
      Fl_Input description {
        label Description
        xywh {5 270 385 70} type Multiline align 5
        code0 {if(ff) o->value(ff->description.c_str());}
      }
      Fl_Input name {
        label Name
        xywh {5 225 530 25} align 5
        code0 {if(ff) o->value(ff->name.c_str());}
      }
      Fl_Return_Button {} {
        label Ok
        callback {Fitter->HandleEditDialog(this);
delete this;}
        xywh {460 350 76 25}
      }
      Fl_Input guess {
        label {Initial Guess Processing}
        tooltip {Gnuplot code to go from a user's mouse clicks to an initial fit guess.  You are given xbar, ybar, sigx, and sigy, and cov, with the obvious definitions.} xywh {5 100 530 60} type Multiline align 5
        code0 {if(ff) o->value(ff->guess.c_str());}
      }
      Fl_Input center {
        label Center
        tooltip {Name of variable to use for the peak "center" in the overlays.} xywh {400 270 135 25} align 5
        code0 {if(ff) o->value(ff->center.c_str());}
      }
      Fl_Input width {
        label Width
        tooltip {Name of variable to use for the peak "center" in the overlays.} xywh {400 310 135 25} align 5
        code0 {if(ff) o->value(ff->width.c_str());}
      }
    }
    code {editing = ff;
if(editing != NULL)
  newfitfunc->label("Edit Fit Function");
newfitfunc->show();} {}
  }
  Function {~NewFitFuncWindow()} {open
  } {
    code {newfitfunc->hide();
delete newfitfunc;} {}
  }
} 

class FitControls {open
} {
  Function {FitControls()} {open
  } {
    Fl_Window win {
      label {Fit Controls} open
      xywh {60 564 825 405} type Double visible
    } {
      Fl_Browser funcs {
        label {Fitting Functions}
        callback {Fitter->SelectFitFunction();}
        xywh {5 20 225 205} type Hold align 5
      }
      Fl_Button {} {
        label New
        callback {new NewFitFuncWindow(NULL);}
        xywh {5 230 45 25}
      }
      Fl_Text_Display description {
        label Description
        xywh {5 270 275 80} align 5
        code0 {o->buffer(new Fl_Text_Buffer());}
      }
      Fl_Text_Display definition {
        label Definition
        xywh {5 370 275 25} align 5
        code0 {o->buffer(new Fl_Text_Buffer());}
      }
      Fl_Browser current {
        label {Current Fit}
        callback {Fitter->update();}
        xywh {315 17 215 208} type Hold align 5
      }
      Fl_Button {} {
        label {Delete }
        callback {new NewFitFuncWindow(NULL);}
        xywh {115 230 65 25} deactivate
      }
      Fl_Button {} {
        label {&Add @->}
        callback {Fitter->AddFitInstance();}
        tooltip {Add a function to the fit.  Shortcut: a} xywh {235 20 74 25} shortcut 0x61
      }
      Fl_Button {} {
        label {Erase @9+}
        callback {Fitter->DelFitInstance();}
        tooltip {Delete the current function from the fit.} xywh {235 50 74 25}
      }
      Fl_Scroll variables {
        label Variables open
        xywh {540 20 260 135} type VERTICAL_ALWAYS box DOWN_BOX color 7
      } {}
      Fl_Button fitall {
        label Fit
        callback {Fitter->fit(NULL);}
        xywh {315 230 30 25}
      }
      Fl_Button {} {
        label {Fit Peak}
        callback {Fitter->fit(Fitter->CurrentFitInstance());}
        xywh {350 230 70 25}
      }
      Fl_Group {} {
        label {Initial Guess} open
        xywh {540 240 170 45} box DOWN_BOX align 5
      } {
        Fl_Button {} {
          label Clear
          callback {Fitter->ClearInitialGuess();}
          xywh {550 250 74 25}
        }
        Fl_Button {} {
          label Apply
          callback {Fitter->UseInitialGuess();}
          xywh {630 250 74 25}
        }
      }
      Fl_Group {} {
        label Overlay open
        xywh {540 305 170 45} box DOWN_BOX align 5
      } {
        Fl_Light_Button overlayPeaks {
          label Peaks
          callback {Fitter->update();}
          xywh {550 315 75 25} value 1
        }
        Fl_Light_Button overlayWidths {
          label Widths
          callback {Fitter->update();}
          xywh {630 315 75 25}
        }
      }
      Fl_Group {} {
        label Plot open
        xywh {540 175 260 45} box DOWN_BOX color 7 align 5
      } {
        Fl_Light_Button plot_fit {
          label Fit
          callback {Fitter->update();}
          xywh {550 185 45 25} value 1
        }
        Fl_Light_Button plot_individual {
          label Individual
          callback {Fitter->update();}
          xywh {600 185 95 25} value 1
        }
        Fl_Light_Button plot_residual {
          label Residual
          callback {Fitter->update();}
          xywh {700 185 95 25}
        }
      }
      Fl_Choice lctype {
        label Direction
        callback {Fitter->updateDirection();} open
        xywh {355 290 165 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label Vertical
          user_data VERTLINE
          xywh {0 0 40 25}
        }
        MenuItem {} {
          label Horizontal
          user_data HORZLINE
          xywh {10 10 40 25}
        }
      }
      Fl_Output line {
        label Line
        xywh {355 260 165 25}
      }
      Fl_Button {} {
        label {@->}
        callback {Fitter->moveLineCut(1,false);}
        tooltip {Move right.  Shortcut: Right} xywh {405 325 35 25}
      }
      Fl_Button {} {
        label {@<-}
        callback {Fitter->moveLineCut(-1,false);}
        tooltip {Move left.  Shortcut: Left} xywh {365 325 35 25}
      }
      Fl_Button {} {
        label {Copy @->}
        callback {Fitter->moveLineCut(1,true);}
        tooltip {Move right and copy.  Shortcut: Shift+Right} xywh {445 325 75 25}
      }
      Fl_Button {} {
        label {@<-  Copy}
        callback {Fitter->moveLineCut(-1,true);}
        tooltip {Move left and copy.  Shortcut: Shift+Left} xywh {285 325 75 25}
      }
      Fl_Button lock {
        callback {Fitter->LockFitInstance();}
        image {padlock.png} xywh {500 230 30 25}
      }
      Fl_Button {} {
        label Push
        callback {Fitter->PushStack();}
        tooltip {Add a function to the fit.  Shortcut: a} xywh {235 130 74 25} shortcut 0x61
      }
      Fl_Button {} {
        label Pop
        callback {Fitter->PopStack();}
        tooltip {Add a function to the fit.  Shortcut: a} xywh {235 160 74 25} shortcut 0x61
      }
      Fl_Output stackdepth {
        label Stack
        xywh {235 100 75 25} align 1
        code0 {o->value("0");}
      }
      Fl_Button {} {
        label Clear
        callback {printf("%p\\n",this);
Fitter->ClearStack();}
        tooltip {Add a function to the fit.  Shortcut: a} xywh {235 190 74 25} shortcut 0x61
      }
      Fl_Button undo {
        label Undo
        callback {Fitter->PopUndo();}
        tooltip {Add a function to the fit.  Shortcut: a} xywh {725 230 74 25} shortcut 0x61 deactivate
      }
      Fl_Button redo {
        label Redo
        callback {Fitter->PopRedo();}
        tooltip {Add a function to the fit.  Shortcut: a} xywh {725 260 74 25} shortcut 0x61 deactivate
      }
      Fl_Button {} {
        label {Save...}
        callback {char *fname = fl_file_chooser("Save Fit","Saved Fit (*.fit)",Fitter->DefaultName().c_str());
if(fname != NULL)
  Fitter->SaveFit(fname);}
        xywh {725 295 74 25}
      }
      Fl_Button {} {
        label {Load...}
        callback {char *fname = fl_file_chooser("Load Fit","Saved Fit (*.fit)",Fitter->DefaultName().c_str());
  if(fname != NULL)
    Fitter->LoadFit(fname);}
        xywh {725 325 74 25}
      }
      Fl_Button unlock {
        callback {Fitter->LockFitInstance();}
        image {openpad.png} xywh {500 230 30 25} hide
      }
      Fl_Button {} {
        label {Export...}
        callback {char *fname = fl_file_chooser("Output as Text","Saved data (*.dat)",Fitter->DefaultName(".dat").c_str());
  if(fname != NULL)
    Fitter->SaveText(fname);}
        xywh {725 355 74 25}
      }
      Fl_Button {} {
        label {Fit Seq.}
        callback {Fitter->FitInSequence();}
        xywh {425 230 70 25}
      }
      Fl_Input fitlimit {
        label {Fit Limit}
        callback {Fitter->updateFitLimit();}
        xywh {540 370 90 25} type Float align 5
      }
      Fl_Light_Button {} {
        label Debug
        callback {Gnuplot_Interface::debugMode = o->value();}
        xywh {635 370 75 25}
      }
      Fl_Button {} {
        label Edit
        callback {new NewFitFuncWindow(Fitter->CurrentFitFunction());}
        xywh {55 230 55 25}
      }
      Fl_Input peakrange {
        label {Peak Range}
        xywh {440 370 90 25} type Float align 5
        code0 {o->value("-1.0");}
      }
      Fl_Button {} {
        label {@<-}
        callback {Fitter->bump(-0.002);}
        tooltip {Move left.  Shortcut: Left} xywh {328 370 35 25}
      }
      Fl_Button {} {
        label {@->}
        callback {Fitter->bump(0.002);}
        tooltip {Move right.  Shortcut: Right} xywh {363 370 35 25}
      }
      Fl_Button {} {
        label {@>>}
        callback {Fitter->bump(0.02);}
        tooltip {Move right.  Shortcut: Right} xywh {398 370 35 25}
      }
      Fl_Button {} {
        label {@<<}
        callback {Fitter->bump(-0.02);}
        tooltip {Move right.  Shortcut: Right} xywh {293 370 35 25}
      }
      Fl_Group {} {
        label Bump open
        xywh {290 370 35 15}
      } {}
      Fl_Light_Button superpose {
        label Super
        callback {if(superpose->value())
  fitall->activate();
else
  fitall->deactivate();} selected
        tooltip {Fit superposition of functions rather than indpendent functions.  Almost certainly what you want.} xywh {245 230 65 25} value 1
      }
      Fl_Light_Button autoright {
        label {A @->}
        xywh {185 230 55 25}
      }
    }
  }
} 
