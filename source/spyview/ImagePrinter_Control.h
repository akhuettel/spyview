// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef ImagePrinter_Control_h
#define ImagePrinter_Control_h
#include <FL/Fl.H>
#include <FL/Fl_Color_Chooser.H>
class ImageWindow;
class Image_Printer;
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Box.H>

class Image_Printer_Control {
public:
  ImageWindow *iw;
  Image_Printer *ip;
  Image_Printer_Control(ImageWindow *iwp);
  Fl_Double_Window *win;
  Fl_Check_Button *yaxis_label;
private:
  void cb_yaxis_label_i(Fl_Check_Button*, void*);
  static void cb_yaxis_label(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *xaxis_label;
private:
  void cb_xaxis_label_i(Fl_Check_Button*, void*);
  static void cb_xaxis_label(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *dir_stamp;
private:
  void cb_dir_stamp_i(Fl_Check_Button*, void*);
  static void cb_dir_stamp(Fl_Check_Button*, void*);
public:
  Fl_Input *title;
  Fl_Check_Button *do_title;
private:
  void cb_do_title_i(Fl_Check_Button*, void*);
  static void cb_do_title(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *caxis_label;
private:
  void cb_caxis_label_i(Fl_Check_Button*, void*);
  static void cb_caxis_label(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *watermark;
  Fl_Round_Button *paper_eps;
private:
  void cb_paper_eps_i(Fl_Round_Button*, void*);
  static void cb_paper_eps(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *paper_letter;
private:
  void cb_paper_letter_i(Fl_Round_Button*, void*);
  static void cb_paper_letter(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *paper_a4;
private:
  void cb_paper_a4_i(Fl_Round_Button*, void*);
  static void cb_paper_a4(Fl_Round_Button*, void*);
public:
  Fl_Check_Button *landscape;
private:
  void cb_landscape_i(Fl_Check_Button*, void*);
  static void cb_landscape(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *plotLineCut;
private:
  void cb_plotLineCut_i(Fl_Check_Button*, void*);
  static void cb_plotLineCut(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *plotLines;
private:
  void cb_plotLines_i(Fl_Check_Button*, void*);
  static void cb_plotLines(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *plotZoomBox;
private:
  void cb_plotZoomBox_i(Fl_Check_Button*, void*);
  static void cb_plotZoomBox(Fl_Check_Button*, void*);
public:
  Fl_Input *width;
private:
  void cb_width_i(Fl_Input*, void*);
  static void cb_width(Fl_Input*, void*);
public:
  Fl_Input *height;
private:
  void cb_height_i(Fl_Input*, void*);
  static void cb_height(Fl_Input*, void*);
public:
  Fl_Input *xoff;
private:
  void cb_xoff_i(Fl_Input*, void*);
  static void cb_xoff(Fl_Input*, void*);
public:
  Fl_Input *yoff;
private:
  void cb_yoff_i(Fl_Input*, void*);
  static void cb_yoff(Fl_Input*, void*);
public:
  Fl_Button *center_x;
private:
  void cb_center_x_i(Fl_Button*, void*);
  static void cb_center_x(Fl_Button*, void*);
  void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
public:
  Fl_Button *center_y;
private:
  void cb_center_y_i(Fl_Button*, void*);
  static void cb_center_y(Fl_Button*, void*);
  void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
  void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
  void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
  void cb_4_i(Fl_Button*, void*);
  static void cb_4(Fl_Button*, void*);
  void cb_5_i(Fl_Button*, void*);
  static void cb_5(Fl_Button*, void*);
public:
  Fl_Input *ticklength;
private:
  void cb_ticklength_i(Fl_Input*, void*);
  static void cb_ticklength(Fl_Input*, void*);
public:
  Fl_Input *xspacing;
private:
  void cb_xspacing_i(Fl_Input*, void*);
  static void cb_xspacing(Fl_Input*, void*);
public:
  Fl_Input *yspacing;
private:
  void cb_yspacing_i(Fl_Input*, void*);
  static void cb_yspacing(Fl_Input*, void*);
public:
  Fl_Input *xscale;
private:
  void cb_xscale_i(Fl_Input*, void*);
  static void cb_xscale(Fl_Input*, void*);
public:
  Fl_Input *yscale;
private:
  void cb_yscale_i(Fl_Input*, void*);
  static void cb_yscale(Fl_Input*, void*);
public:
  Fl_Check_Button *precise_ticks;
private:
  void cb_precise_ticks_i(Fl_Check_Button*, void*);
  static void cb_precise_ticks(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *fancy_ticks;
private:
  void cb_fancy_ticks_i(Fl_Check_Button*, void*);
  static void cb_fancy_ticks(Fl_Check_Button*, void*);
public:
  Fl_Input *face;
private:
  void cb_face_i(Fl_Input*, void*);
  static void cb_face(Fl_Input*, void*);
public:
  Fl_Input *fontsize;
private:
  void cb_fontsize_i(Fl_Input*, void*);
  static void cb_fontsize(Fl_Input*, void*);
public:
  Fl_Input *boxwidth;
private:
  void cb_boxwidth_i(Fl_Input*, void*);
  static void cb_boxwidth(Fl_Input*, void*);
public:
  Fl_Input *tickwidth;
private:
  void cb_tickwidth_i(Fl_Input*, void*);
  static void cb_tickwidth(Fl_Input*, void*);
public:
  Fl_Input *xticfmt;
private:
  void cb_xticfmt_i(Fl_Input*, void*);
  static void cb_xticfmt(Fl_Input*, void*);
public:
  Fl_Input *yticfmt;
private:
  void cb_yticfmt_i(Fl_Input*, void*);
  static void cb_yticfmt(Fl_Input*, void*);
public:
  Fl_Input *cticfmt;
private:
  void cb_cticfmt_i(Fl_Input*, void*);
  static void cb_cticfmt(Fl_Input*, void*);
public:
  Fl_Check_Button *colorbar;
private:
  void cb_colorbar_i(Fl_Check_Button*, void*);
  static void cb_colorbar(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *cbar_height_per;
private:
  void cb_cbar_height_per_i(Fl_Value_Input*, void*);
  static void cb_cbar_height_per(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *cbar_width;
private:
  void cb_cbar_width_i(Fl_Value_Input*, void*);
  static void cb_cbar_width(Fl_Value_Input*, void*);
  void cb_More_i(Fl_Button*, void*);
  static void cb_More(Fl_Button*, void*);
public:
  Fl_Check_Button *rotate_cbar;
private:
  void cb_Load_i(Fl_Button*, void*);
  static void cb_Load(Fl_Button*, void*);
  void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  void cb_Load1_i(Fl_Button*, void*);
  static void cb_Load1(Fl_Button*, void*);
  void cb_Save1_i(Fl_Button*, void*);
  static void cb_Save1(Fl_Button*, void*);
  void cb_Preview_i(Fl_Button*, void*);
  static void cb_Preview(Fl_Button*, void*);
  void cb_Generate_i(Fl_Button*, void*);
  static void cb_Generate(Fl_Button*, void*);
public:
  Fl_Button *preview_button;
private:
  void cb_preview_button_i(Fl_Button*, void*);
  static void cb_preview_button(Fl_Button*, void*);
public:
  Fl_Button *live;
private:
  void cb_live_i(Fl_Button*, void*);
  static void cb_live(Fl_Button*, void*);
  void cb_Dismiss_i(Fl_Button*, void*);
  static void cb_Dismiss(Fl_Button*, void*);
public:
  Fl_Input *xrange;
private:
  void cb_xrange_i(Fl_Input*, void*);
  static void cb_xrange(Fl_Input*, void*);
public:
  Fl_Input *yrange;
private:
  void cb_yrange_i(Fl_Input*, void*);
  static void cb_yrange(Fl_Input*, void*);
public:
  Fl_Choice *plotRange;
private:
  void cb_plotRange_i(Fl_Choice*, void*);
  static void cb_plotRange(Fl_Choice*, void*);
  static Fl_Menu_Item menu_plotRange[];
public:
  Fl_Check_Button *increment;
private:
  void cb_Colors_i(Fl_Button*, void*);
  static void cb_Colors(Fl_Button*, void*);
public:
  Fl_Check_Button *auto_inc;
private:
  void cb_auto_inc_i(Fl_Check_Button*, void*);
  static void cb_auto_inc(Fl_Check_Button*, void*);
public:
  Fl_Counter *incnum;
  Fl_Choice *format;
  static Fl_Menu_Item menu_format[];
  Fl_Check_Button *do_number;
  Fl_Double_Window *win2;
private:
  void cb_dismiss_i(Fl_Button*, void*);
  static void cb_dismiss(Fl_Button*, void*);
public:
  Fl_Input *preview_cmd;
  Fl_Input *gs_cmd;
private:
  void cb_Browse_i(Fl_Button*, void*);
  static void cb_Browse(Fl_Button*, void*);
public:
  Fl_Check_Button *extra_png;
  Fl_Check_Button *extra_pdf;
  Fl_Input *png_dpi;
private:
  void cb_Browse1_i(Fl_Button*, void*);
  static void cb_Browse1(Fl_Button*, void*);
  void cb_save_i(Fl_Button*, void*);
  static void cb_save(Fl_Button*, void*);
  void cb_load_i(Fl_Button*, void*);
  static void cb_load(Fl_Button*, void*);
public:
  Fl_Check_Button *cmyk;
  Fl_Check_Button *extra_svs;
  Fl_Check_Button *extra_set;
  Fl_Double_Window *win3;
  Fl_Input *zscale;
private:
  void cb_zscale_i(Fl_Input*, void*);
  static void cb_zscale(Fl_Input*, void*);
public:
  Fl_Value_Input *cspacing;
  Fl_Check_Button *linear_cmap;
  Fl_Value_Input *cmin;
  Fl_Value_Input *cmax;
  Fl_Value_Input *cbegin;
  Fl_Value_Input *clabelspacing;
private:
  void cb_Dismiss1_i(Fl_Button*, void*);
  static void cb_Dismiss1(Fl_Button*, void*);
public:
  Fl_Double_Window *pc;
  Fl_Color_Chooser *text_color;
private:
  void cb_text_color_i(Fl_Color_Chooser*, void*);
  static void cb_text_color(Fl_Color_Chooser*, void*);
public:
  Fl_Color_Chooser *border_color;
private:
  void cb_border_color_i(Fl_Color_Chooser*, void*);
  static void cb_border_color(Fl_Color_Chooser*, void*);
public:
  Fl_Color_Chooser *large_tick_color;
private:
  void cb_large_tick_color_i(Fl_Color_Chooser*, void*);
  static void cb_large_tick_color(Fl_Color_Chooser*, void*);
public:
  Fl_Color_Chooser *small_tick_color;
private:
  void cb_small_tick_color_i(Fl_Color_Chooser*, void*);
  static void cb_small_tick_color(Fl_Color_Chooser*, void*);
public:
  Fl_Color_Chooser *linecut_color;
private:
  void cb_linecut_color_i(Fl_Color_Chooser*, void*);
  static void cb_linecut_color(Fl_Color_Chooser*, void*);
public:
  Fl_Color_Chooser *overlay_color;
private:
  void cb_overlay_color_i(Fl_Color_Chooser*, void*);
  static void cb_overlay_color(Fl_Color_Chooser*, void*);
  void cb_Dismiss2_i(Fl_Button*, void*);
  static void cb_Dismiss2(Fl_Button*, void*);
public:
  Fl_Color_Chooser *zoombox_color;
private:
  void cb_zoombox_color_i(Fl_Color_Chooser*, void*);
  static void cb_zoombox_color(Fl_Color_Chooser*, void*);
};
#endif
