# data file for the Fltk User Interface Designer (fluid)
version 1.0109 
header_name {.h} 
code_name {.cxx}
decl {\#include <FL/Fl_File_Chooser.H>} {} 

decl {\#include <FL/Fl_Help_Dialog.H>} {} 

decl {extern std::string userdir;} {} 

decl {\#include "spypal_gradient.H"} {public
} 

decl {\#include "../config.h"} {public
} 

decl {\#include <FL/Fl_Color_Chooser.H>} {public global
} 

decl {\#include "Fl_Table.H"} {public
} 

decl {\#include "spypal.h"} {public
} 

decl {\#include <stdlib.h>} {public
} 

decl {\#include <stdio.h>} {public
} 

class spypal_wizard_base {open
} {
  Function {spypal_wizard_base()} {open
  } {
    Fl_Window win {
      label Spypal open
      xywh {60 282 935 490} type Double resizable visible
    } {
      Fl_Input steps {
        label Steps
        callback {if(atoi(o->value()) <= 0)
  o->value("8");
do_update();}
        xywh {585 0 110 25} when 8
        code0 {o->value("512");}
      }
      Fl_Menu_Bar {} {open
        xywh {0 0 95 25}
      } {
        Submenu {} {
          label {&File} open
          xywh {0 0 74 25}
        } {
          MenuItem {} {
            label {&Open}
            callback {char *fname = fl_file_chooser("Load Colormap","Spypal Palette (*.spp)",(userdir+DIRECTORY_SEPARATOR+"cmaps").c_str());
if(fname != NULL)
  load(fname);}
            xywh {0 0 40 25} divider
          }
          MenuItem {} {
            label {&Save}
            callback {char *fname = fl_file_chooser("Save Colormap","Spypal Palette (*.spp)",(userdir+DIRECTORY_SEPARATOR+"cmaps"+DIRECTORY_SEPARATOR+"user").c_str());
if(fname != NULL)
  save(fname);}
            xywh {0 0 40 25} divider
          }
          MenuItem {} {
            label {Export &Text}
            callback {char *fname = fl_file_chooser("Export as Text","","");
if(fname)
  dump_colormap_text(fname);}
            xywh {0 0 40 25}
          }
          MenuItem {} {
            label {Export &Image}
            callback {char *fname = fl_file_chooser("Export as Image","","");
if(fname)
  dump_colormap_ppm(fname);}
            xywh {10 10 40 25}
          }
          MenuItem {} {
            label {&Quit}
            callback {exit(0);}
            xywh {0 0 40 25}
          }
        }
        Submenu {} {
          label {&Help} open
          xywh {5 5 74 25}
        } {
          MenuItem {} {
            label {&Manual}
            callback {
static Fl_Help_Dialog hv;
std::string file;
file = spypal_sharedir + DIRECTORY_SEPARATOR + "html" + DIRECTORY_SEPARATOR + "spypal_help.html";
hv.load(file.c_str());
hv.show();
}
            xywh {0 0 40 25}
          }
        }
      }
      Fl_Box cc {
        xywh {0 175 425 275} box DOWN_BOX color 7 selection_color 7
        code0 {o->rgb(1.0,1.0,1.0);}
        class Fl_Color_Chooser
      }
      Fl_Box grad {
        xywh {0 50 935 125}
        class Fl_Spypal_Gradient
      }
      Fl_Scroll swatches {open
        xywh {425 175 510 274} type VERTICAL box DOWN_BOX
      } {}
      Fl_Output tooltip {
        xywh {0 450 935 45} type Multiline textsize 12
      }
      Fl_Button {} {
        label {Space Evenly}
        callback {space_evenly();}
        xywh {705 0 100 25}
      }
      Fl_Group advanced_controls {open
        xywh {95 0 445 29} hide
      } {
        Fl_Choice colorspace {
          label Colorspace
          callback {do_update();} open
          xywh {184 1 90 25} down_box BORDER_BOX
        } {
          MenuItem {} {
            label LAB
            user_data {&cc_CIELAB}
            xywh {15 15 40 25}
          }
          MenuItem {} {
            label sRGB
            user_data {&cc_sRGB}
            xywh {5 5 40 25}
          }
          MenuItem {} {
            label HSV
            user_data {&cc_HSV}
            xywh {15 15 40 25}
          }
          MenuItem {} {
            label CIECAM02
            user_data {&cc_CIECAM02}
            xywh {5 5 40 25}
          }
          MenuItem {} {
            label Luv
            user_data {&cc_CIELuv}
            xywh {5 5 40 25}
          }
          MenuItem {} {
            label XYZ
            user_data {&cc_CIEXYZ}
            xywh {5 5 40 25}
          }
        }
        Fl_Choice metricspace {
          label Metric
          callback {do_update();}
          xywh {330 1 90 25} down_box BORDER_BOX when 6
        } {
          MenuItem {} {
            label LAB
            user_data {&cc_CIELAB}
            xywh {25 25 40 25}
          }
          MenuItem {} {
            label sRGB
            user_data {&cc_sRGB}
            xywh {15 15 40 25}
          }
          MenuItem {} {
            label HSV
            user_data {&cc_HSV}
            xywh {25 25 40 25}
          }
          MenuItem {} {
            label CIECAM02
            user_data {&cc_CIECAM02}
            xywh {15 15 40 25}
          }
          MenuItem {} {
            label Luv
            user_data {&cc_CIELuv}
            xywh {15 15 40 25}
          }
          MenuItem {} {
            label XYZ
            user_data {&cc_CIEXYZ}
            xywh {15 15 40 25}
          }
        }
        Fl_Choice opt_direction {
          label Path
          callback {do_update();} open
          xywh {455 1 85 24} down_box BORDER_BOX
        } {
          MenuItem {} {
            label Straight
            user_data OPTS_STRAIGHT
            xywh {20 20 40 25}
          }
          MenuItem {} {
            label CCW
            user_data OPTS_CCW
            xywh {20 20 40 25}
          }
          MenuItem {} {
            label CW
            user_data OPTS_CW
            xywh {20 20 40 25}
          }
        }
      }
      Fl_Group basic_controls {open
        xywh {95 0 445 25}
      } {
        Fl_Choice grad_style {
          label {Gradient Style}
          callback {if(o->mvalue())
  o->mvalue()->do_callback(o);} open
          xywh {280 0 245 25} down_box BORDER_BOX
        } {
          MenuItem {} {
            label Luv
            callback {colorspace->value(colorspace->find_item("Luv"));
metricspace->value(metricspace->find_item("Luv"));
opt_direction->value(opt_direction->find_item("Straight"));
do_update();}
            xywh {10 10 40 25}
          }
          MenuItem {} {
            label sRGB
            callback {colorspace->value(colorspace->find_item("sRGB"));
metricspace->value(metricspace->find_item("sRGB"));
opt_direction->value(opt_direction->find_item("Straight"));
do_update();}
            xywh {0 0 40 25}
          }
          MenuItem {} {
            label {HSV (perceptual ramps)}
            callback {colorspace->value(colorspace->find_item("HSV"));
metricspace->value(metricspace->find_item("Luv"));
opt_direction->value(opt_direction->find_item("Straight"));
do_update();}
            xywh {10 10 40 25}
          }
        }
      }
      Fl_Light_Button advanced {
        label Advanced
        callback {if(o->value())
  { basic_controls->hide();
    advanced_controls->show();
  }
else
  { basic_controls->show();
    advanced_controls->hide();
    grad_style->do_callback();
  }}
        xywh {825 0 100 25}
      }
      Fl_Group import_controls {
        label {Import Controls} open selected
        xywh {477 25 449 25} box DOWN_BOX align 4 hide
      } {
        Fl_Spinner waypoints {
          label Waypoints
          callback {import_update();}
          xywh {812 28 40 20} minimum 2 maximum 64 value 2
        }
        Fl_Output import_error {
          label Error
          tooltip {Total error (worst single-point error), measured as cartesian distance in sRGB space.} xywh {522 28 130 20}
        }
        Fl_Button {} {
          label Residuals
          callback {import_residuals();}
          xywh {657 28 74 20}
        }
        Fl_Button {} {
          label Dismiss
          callback {import_controls->hide();}
          xywh {857 28 64 20}
        }
      }
    }
  }
  Function {do_update()} {open
  } {
    code {if(import_controls->visible())
              {
                import_update(); 		
              }
            else
              { recalculate(true); grad->redraw();}} {}
  }
  Function {recalculate(bool repos = false)} {open return_type {virtual void}
  } {}
  Function {save(std::string fname)} {open return_type {virtual void}
  } {}
  Function {load(std::string fname)} {open return_type {virtual void}
  } {}
  Function {space_evenly()} {open return_type {virtual void}
  } {}
  Function {import_update()} {open return_type {virtual void}
  } {}
  Function {import_residuals()} {open return_type {virtual void}
  } {}
} 

class spypal_slider_editor {open
} {
  Function {update_slider()} {open
  } {
    code {slider->g->recalculate(true);
slider->g->redraw();} {}
  }
  Function {spypal_slider_editor()} {open
  } {
    Fl_Window win {
      label Waypoint open
      xywh {792 302 160 75} type Double hide
    } {
      Fl_Input position {
        label {Position (0.0-1.0)}
        callback {slider->loc = atof(o->value());
update_slider();}
        xywh {10 20 145 25} type Float align 5
      }
      Fl_Button {} {
        label Dismiss
        callback {win->hide();}
        xywh {80 50 74 25}
      }
      Fl_Check_Button locked {
        label Locked
        callback {slider->locked = o->value();
update_slider();}
        xywh {60 55 15 15} down_box DOWN_BOX align 4
      }
    }
  }
  decl {Fl_Spypal_GSlider *slider;} {public
  }
} 

Function {make_spypal_text_window()} {open
} {
  Fl_Window spypal_text_window {
    label {Spypal Colormap}
    xywh {417 161 380 375} type Double hide resizable
  } {
    Fl_Text_Display cmap_text_display {
      xywh {0 0 380 375} textfont 4 resizable
    }
  }
} 
